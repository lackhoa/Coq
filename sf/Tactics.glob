DIGEST 70bf5cee5d0d286e0fc2991641c07a7a
FTactics
R612:615 Poly <> <> lib
prf 891:896 <> silly1
R918:920 Coq.Init.Datatypes <> nat ind
R971:973 Coq.Init.Logic <> :type_scope:x_'='_x not
R966:966 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R968:968 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R970:970 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R969:969 Tactics <> o var
R967:967 Tactics <> n var
R974:974 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R976:976 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R978:978 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R977:977 Tactics <> p var
R975:975 Tactics <> m var
R949:951 Coq.Init.Logic <> :type_scope:x_'='_x not
R944:944 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R946:946 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R948:948 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R947:947 Tactics <> o var
R945:945 Tactics <> n var
R952:952 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R954:954 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R956:956 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R955:955 Tactics <> p var
R953:953 Tactics <> n var
R930:932 Coq.Init.Logic <> :type_scope:x_'='_x not
R929:929 Tactics <> n var
R933:933 Tactics <> m var
prf 1502:1507 <> silly2
R1529:1531 Coq.Init.Datatypes <> nat ind
R1613:1615 Coq.Init.Logic <> :type_scope:x_'='_x not
R1608:1608 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1610:1610 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1612:1612 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1611:1611 Tactics <> o var
R1609:1609 Tactics <> n var
R1616:1616 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1618:1618 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1620:1620 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1619:1619 Tactics <> p var
R1617:1617 Tactics <> m var
R1570:1572 Coq.Init.Datatypes <> nat ind
R1590:1592 Coq.Init.Logic <> :type_scope:x_'='_x not
R1585:1585 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1587:1587 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1589:1589 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1588:1588 Tactics <> o var
R1586:1586 Tactics <> q var
R1593:1593 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1595:1595 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1597:1597 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1596:1596 Tactics <> p var
R1594:1594 Tactics <> r var
R1577:1579 Coq.Init.Logic <> :type_scope:x_'='_x not
R1576:1576 Tactics <> q var
R1580:1580 Tactics <> r var
R1541:1543 Coq.Init.Logic <> :type_scope:x_'='_x not
R1540:1540 Tactics <> n var
R1544:1544 Tactics <> m var
prf 2287:2293 <> silly2a
R2311:2313 Coq.Init.Datatypes <> nat ind
R2405:2407 Coq.Init.Logic <> :type_scope:x_'='_x not
R2402:2402 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2404:2404 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2403:2403 Tactics <> n var
R2408:2408 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2410:2410 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2409:2409 Tactics <> m var
R2360:2362 Coq.Init.Datatypes <> nat ind
R2386:2388 Coq.Init.Logic <> :type_scope:x_'='_x not
R2383:2383 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2385:2385 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2384:2384 Tactics <> q var
R2389:2389 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2391:2391 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2390:2390 Tactics <> r var
R2371:2373 Coq.Init.Logic <> :type_scope:x_'='_x not
R2366:2366 Poly <> ::'('_x_','_x_')' not
R2368:2368 Poly <> ::'('_x_','_x_')' not
R2370:2370 Poly <> ::'('_x_','_x_')' not
R2367:2367 Tactics <> q var
R2369:2369 Tactics <> q var
R2374:2374 Poly <> ::'('_x_','_x_')' not
R2376:2376 Poly <> ::'('_x_','_x_')' not
R2378:2378 Poly <> ::'('_x_','_x_')' not
R2375:2375 Tactics <> r var
R2377:2377 Tactics <> r var
R2327:2329 Coq.Init.Logic <> :type_scope:x_'='_x not
R2322:2322 Poly <> ::'('_x_','_x_')' not
R2324:2324 Poly <> ::'('_x_','_x_')' not
R2326:2326 Poly <> ::'('_x_','_x_')' not
R2323:2323 Tactics <> n var
R2325:2325 Tactics <> n var
R2330:2330 Poly <> ::'('_x_','_x_')' not
R2332:2332 Poly <> ::'('_x_','_x_')' not
R2334:2334 Poly <> ::'('_x_','_x_')' not
R2331:2331 Tactics <> m var
R2333:2333 Tactics <> m var
prf 2593:2600 <> silly_ex
R2694:2696 Coq.Init.Logic <> :type_scope:x_'='_x not
R2688:2691 Basics <> oddb def
R2697:2700 Basics <> true constr
R2672:2674 Coq.Init.Logic <> :type_scope:x_'='_x not
R2665:2669 Basics <> evenb def
R2675:2678 Basics <> true constr
R2648:2650 Coq.Init.Logic <> :type_scope:x_'='_x not
R2638:2641 Basics <> oddb def
R2644:2644 Coq.Init.Datatypes <> S constr
R2646:2646 Tactics <> n var
R2651:2654 Basics <> true constr
R2627:2629 Coq.Init.Logic <> :type_scope:x_'='_x not
R2620:2624 Basics <> evenb def
R2626:2626 Tactics <> n var
R2630:2633 Basics <> true constr
prf 2978:2992 <> silly3_firsttry
R3008:3010 Coq.Init.Datatypes <> nat ind
R3066:3068 Coq.Init.Logic <> :type_scope:x_'='_x not
R3047:3053 Basics <> beq_nat def
R3056:3056 Coq.Init.Datatypes <> S constr
R3059:3059 Coq.Init.Datatypes <> S constr
R3061:3061 Tactics <> n var
R3069:3072 Basics <> true constr
R3023:3025 Coq.Init.Logic <> :type_scope:x_'='_x not
R3019:3022 Basics <> true constr
R3026:3032 Basics <> beq_nat def
R3034:3034 Tactics <> n var
prf 3621:3633 <> rev_exercise1
R3652:3655 Poly <> list ind
R3657:3659 Coq.Init.Datatypes <> nat ind
R3689:3691 Coq.Init.Logic <> :type_scope:x_'='_x not
R3687:3688 Tactics <> l' var
R3692:3694 Poly <> rev def
R3696:3696 Tactics <> l var
R3669:3671 Coq.Init.Logic <> :type_scope:x_'='_x not
R3668:3668 Tactics <> l var
R3672:3674 Poly <> rev def
R3676:3677 Tactics <> l' var
R3741:3754 Poly <> rev_involutive thm
R3741:3754 Poly <> rev_involutive thm
def 4427:4442 <> trans_eq_example
R4468:4470 Coq.Init.Datatypes <> nat ind
R4528:4530 Coq.Init.Logic <> :type_scope:x_'='_x not
R4523:4523 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4525:4525 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4527:4527 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4526:4526 Tactics <> b var
R4524:4524 Tactics <> a var
R4531:4531 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4533:4533 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4535:4535 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4534:4534 Tactics <> f var
R4532:4532 Tactics <> e var
R4506:4508 Coq.Init.Logic <> :type_scope:x_'='_x not
R4501:4501 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4503:4503 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4505:4505 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4504:4504 Tactics <> d var
R4502:4502 Tactics <> c var
R4509:4509 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4511:4511 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4513:4513 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4512:4512 Tactics <> f var
R4510:4510 Tactics <> e var
R4484:4486 Coq.Init.Logic <> :type_scope:x_'='_x not
R4479:4479 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4481:4481 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4483:4483 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4482:4482 Tactics <> b var
R4480:4480 Tactics <> a var
R4487:4487 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4489:4489 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4491:4491 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4490:4490 Tactics <> d var
R4488:4488 Tactics <> c var
prf 4792:4799 <> trans_eq
R4828:4828 Tactics <> X var
R4853:4855 Coq.Init.Logic <> :type_scope:x_'='_x not
R4852:4852 Tactics <> n var
R4856:4856 Tactics <> o var
R4844:4846 Coq.Init.Logic <> :type_scope:x_'='_x not
R4843:4843 Tactics <> m var
R4847:4847 Tactics <> o var
R4835:4837 Coq.Init.Logic <> :type_scope:x_'='_x not
R4834:4834 Tactics <> n var
R4838:4838 Tactics <> m var
def 5111:5127 <> trans_eq_example'
R5153:5155 Coq.Init.Datatypes <> nat ind
R5213:5215 Coq.Init.Logic <> :type_scope:x_'='_x not
R5208:5208 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5210:5210 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5212:5212 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5211:5211 Tactics <> b var
R5209:5209 Tactics <> a var
R5216:5216 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5218:5218 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5220:5220 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5219:5219 Tactics <> f var
R5217:5217 Tactics <> e var
R5191:5193 Coq.Init.Logic <> :type_scope:x_'='_x not
R5186:5186 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5188:5188 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5190:5190 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5189:5189 Tactics <> d var
R5187:5187 Tactics <> c var
R5194:5194 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5196:5196 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5198:5198 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5197:5197 Tactics <> f var
R5195:5195 Tactics <> e var
R5169:5171 Coq.Init.Logic <> :type_scope:x_'='_x not
R5164:5164 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5166:5166 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5168:5168 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5167:5167 Tactics <> b var
R5165:5165 Tactics <> a var
R5172:5172 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5174:5174 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5176:5176 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5175:5175 Tactics <> d var
R5173:5173 Tactics <> c var
R5691:5691 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5693:5693 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5695:5695 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5673:5680 Tactics <> trans_eq thm
R5691:5691 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5693:5693 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5695:5695 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5673:5680 Tactics <> trans_eq thm
def 6027:6043 <> trans_eq_exercise
R6065:6067 Coq.Init.Datatypes <> nat ind
R6121:6121 Coq.Init.Logic <> :type_scope:x_'='_x not
R6127:6131 Coq.Init.Logic <> :type_scope:x_'='_x not
R6142:6142 Coq.Init.Logic <> :type_scope:x_'='_x not
R6123:6125 Basics <> :nat_scope:x_'+'_x not
R6122:6122 Tactics <> n var
R6126:6126 Tactics <> p var
R6132:6139 Basics <> minustwo def
R6141:6141 Tactics <> o var
R6101:6101 Coq.Init.Logic <> :type_scope:x_'='_x not
R6107:6110 Coq.Init.Logic <> :type_scope:x_'='_x not
R6103:6105 Basics <> :nat_scope:x_'+'_x not
R6102:6102 Tactics <> n var
R6106:6106 Tactics <> p var
R6111:6111 Tactics <> m var
R6077:6080 Coq.Init.Logic <> :type_scope:x_'='_x not
R6091:6091 Coq.Init.Logic <> :type_scope:x_'='_x not
R6076:6076 Tactics <> m var
R6081:6088 Basics <> minustwo def
R6090:6090 Tactics <> o var
R6168:6175 Tactics <> trans_eq thm
R6168:6175 Tactics <> trans_eq thm
prf 7688:7698 <> S_injective
R7716:7718 Coq.Init.Datatypes <> nat ind
R7740:7742 Coq.Init.Logic <> :type_scope:x_'='_x not
R7739:7739 Tactics <> n var
R7743:7743 Tactics <> m var
R7727:7729 Coq.Init.Logic <> :type_scope:x_'='_x not
R7724:7724 Coq.Init.Datatypes <> S constr
R7726:7726 Tactics <> n var
R7730:7730 Coq.Init.Datatypes <> S constr
R7732:7732 Tactics <> m var
prf 8238:8250 <> inversion_ex1
R8270:8272 Coq.Init.Datatypes <> nat ind
R8302:8304 Coq.Init.Logic <> :type_scope:x_'='_x not
R8299:8299 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8301:8301 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8300:8300 Tactics <> n var
R8305:8305 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8307:8307 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8306:8306 Tactics <> m var
R8284:8286 Coq.Init.Logic <> :type_scope:x_'='_x not
R8278:8278 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8280:8281 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8283:8283 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8282:8282 Tactics <> m var
R8279:8279 Tactics <> n var
R8287:8287 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8289:8290 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8292:8292 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8291:8291 Tactics <> o var
R8288:8288 Tactics <> o var
prf 8465:8477 <> inversion_ex2
R8495:8497 Coq.Init.Datatypes <> nat ind
R8519:8521 Coq.Init.Logic <> :type_scope:x_'='_x not
R8518:8518 Tactics <> n var
R8522:8522 Tactics <> m var
R8506:8508 Coq.Init.Logic <> :type_scope:x_'='_x not
R8503:8503 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8505:8505 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8504:8504 Tactics <> n var
R8509:8509 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8511:8511 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8510:8510 Tactics <> m var
def 8644:8656 <> inversion_ex3
R8687:8687 Tactics <> X var
R8697:8700 Poly <> list ind
R8702:8702 Tactics <> X var
R8756:8758 Coq.Init.Logic <> :type_scope:x_'='_x not
R8755:8755 Tactics <> x var
R8759:8759 Tactics <> y var
R8740:8742 Coq.Init.Logic <> :type_scope:x_'='_x not
R8735:8738 Poly <> ::x_'::'_x not
R8734:8734 Tactics <> y var
R8739:8739 Tactics <> l var
R8744:8747 Poly <> ::x_'::'_x not
R8743:8743 Tactics <> x var
R8748:8748 Tactics <> j var
R8719:8721 Coq.Init.Logic <> :type_scope:x_'='_x not
R8709:8712 Poly <> ::x_'::'_x not
R8708:8708 Tactics <> x var
R8714:8717 Poly <> ::x_'::'_x not
R8713:8713 Tactics <> y var
R8718:8718 Tactics <> l var
R8723:8726 Poly <> ::x_'::'_x not
R8722:8722 Tactics <> z var
R8727:8727 Tactics <> j var
prf 9048:9058 <> beq_nat_0_l
R9098:9100 Coq.Init.Logic <> :type_scope:x_'='_x not
R9097:9097 Tactics <> n var
R9086:9088 Coq.Init.Logic <> :type_scope:x_'='_x not
R9075:9081 Basics <> beq_nat def
R9085:9085 Tactics <> n var
R9089:9092 Basics <> true constr
prf 10008:10020 <> inversion_ex4
R10036:10038 Coq.Init.Datatypes <> nat ind
R10062:10064 Coq.Init.Logic <> :type_scope:x_'='_x not
R10058:10060 Basics <> :nat_scope:x_'+'_x not
R10047:10049 Coq.Init.Logic <> :type_scope:x_'='_x not
R10044:10044 Coq.Init.Datatypes <> S constr
R10046:10046 Tactics <> n var
R10050:10050 Coq.Init.Datatypes <> O constr
prf 10126:10138 <> inversion_ex5
R10156:10158 Coq.Init.Datatypes <> nat ind
R10185:10187 Coq.Init.Logic <> :type_scope:x_'='_x not
R10182:10182 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R10184:10184 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R10183:10183 Tactics <> n var
R10188:10188 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R10190:10190 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R10189:10189 Tactics <> m var
R10169:10171 Coq.Init.Logic <> :type_scope:x_'='_x not
R10164:10168 Basics <> false constr
R10172:10175 Basics <> true constr
def 10702:10714 <> inversion_ex6
R10771:10771 Tactics <> X var
R10781:10784 Poly <> list ind
R10786:10786 Tactics <> X var
R10836:10838 Coq.Init.Logic <> :type_scope:x_'='_x not
R10835:10835 Tactics <> x var
R10839:10839 Tactics <> z var
R10820:10822 Coq.Init.Logic <> :type_scope:x_'='_x not
R10815:10818 Poly <> ::x_'::'_x not
R10814:10814 Tactics <> y var
R10819:10819 Tactics <> l var
R10824:10827 Poly <> ::x_'::'_x not
R10823:10823 Tactics <> z var
R10828:10828 Tactics <> j var
R10803:10805 Coq.Init.Logic <> :type_scope:x_'='_x not
R10793:10796 Poly <> ::x_'::'_x not
R10792:10792 Tactics <> x var
R10798:10801 Poly <> ::x_'::'_x not
R10797:10797 Tactics <> y var
R10802:10802 Tactics <> l var
R10806:10807 Poly <> ::'['_']' not
prf 11990:11996 <> f_equal
R12029:12029 Tactics <> B var
R12024:12024 Tactics <> A var
R12038:12038 Tactics <> A var
R12056:12058 Coq.Init.Logic <> :type_scope:x_'='_x not
R12053:12053 Tactics <> f var
R12055:12055 Tactics <> x var
R12059:12059 Tactics <> f var
R12061:12061 Tactics <> y var
R12045:12047 Coq.Init.Logic <> :type_scope:x_'='_x not
R12044:12044 Tactics <> x var
R12048:12048 Tactics <> y var
prf 12564:12568 <> S_inj
R12586:12588 Coq.Init.Datatypes <> nat ind
R12596:12599 Basics <> bool ind
R12652:12654 Coq.Init.Logic <> :type_scope:x_'='_x not
R12641:12647 Basics <> beq_nat def
R12651:12651 Tactics <> m var
R12649:12649 Tactics <> n var
R12655:12655 Tactics <> b var
R12627:12629 Coq.Init.Logic <> :type_scope:x_'='_x not
R12608:12614 Basics <> beq_nat def
R12623:12623 Coq.Init.Datatypes <> S constr
R12625:12625 Tactics <> m var
R12617:12617 Coq.Init.Datatypes <> S constr
R12619:12619 Tactics <> n var
R12630:12630 Tactics <> b var
prf 13493:13499 <> silly3'
R13515:13517 Coq.Init.Datatypes <> nat ind
R13608:13610 Coq.Init.Logic <> :type_scope:x_'='_x not
R13604:13607 Basics <> true constr
R13611:13617 Basics <> beq_nat def
R13620:13620 Coq.Init.Datatypes <> S constr
R13623:13623 Coq.Init.Datatypes <> S constr
R13625:13625 Tactics <> n var
R13583:13585 Coq.Init.Logic <> :type_scope:x_'='_x not
R13579:13582 Basics <> true constr
R13586:13592 Basics <> beq_nat def
R13594:13594 Tactics <> n var
R13565:13567 Coq.Init.Logic <> :type_scope:x_'='_x not
R13546:13552 Basics <> beq_nat def
R13555:13555 Coq.Init.Datatypes <> S constr
R13558:13558 Coq.Init.Datatypes <> S constr
R13560:13560 Tactics <> n var
R13568:13571 Basics <> true constr
R13535:13537 Coq.Init.Logic <> :type_scope:x_'='_x not
R13524:13530 Basics <> beq_nat def
R13532:13532 Tactics <> n var
R13538:13541 Basics <> true constr
prf 14545:14562 <> plus_n_n_injective
R14606:14608 Coq.Init.Logic <> :type_scope:x_'='_x not
R14605:14605 Tactics <> n var
R14609:14609 Tactics <> m var
R14588:14590 Coq.Init.Logic <> :type_scope:x_'='_x not
R14584:14586 Basics <> :nat_scope:x_'+'_x not
R14583:14583 Tactics <> n var
R14587:14587 Tactics <> n var
R14592:14594 Basics <> :nat_scope:x_'+'_x not
R14591:14591 Tactics <> m var
R14595:14595 Tactics <> m var
R14784:14792 Induction <> plus_n_Sm prfax
R14784:14792 Induction <> plus_n_Sm prfax
R14830:14838 Induction <> plus_n_Sm prfax
R14830:14838 Induction <> plus_n_Sm prfax
R14857:14865 Induction <> plus_n_Sm prfax
R14857:14865 Induction <> plus_n_Sm prfax
prf 15836:15858 <> double_injective_FAILED
R15908:15910 Coq.Init.Logic <> :type_scope:x_'='_x not
R15907:15907 Tactics <> n var
R15911:15911 Tactics <> m var
R15887:15889 Coq.Init.Logic <> :type_scope:x_'='_x not
R15879:15884 Induction <> double def
R15886:15886 Tactics <> n var
R15890:15895 Induction <> double def
R15897:15897 Tactics <> m var
R16191:16197 Tactics <> f_equal thm
R16191:16197 Tactics <> f_equal thm
prf 18433:18448 <> double_injective
R18498:18500 Coq.Init.Logic <> :type_scope:x_'='_x not
R18497:18497 Tactics <> n var
R18501:18501 Tactics <> m var
R18477:18479 Coq.Init.Logic <> :type_scope:x_'='_x not
R18469:18474 Induction <> double def
R18476:18476 Tactics <> n var
R18480:18485 Induction <> double def
R18487:18487 Tactics <> m var
R19374:19380 Tactics <> f_equal thm
R19374:19380 Tactics <> f_equal thm
prf 20281:20299 <> beq_nat_true_failed
R20342:20344 Coq.Init.Logic <> :type_scope:x_'='_x not
R20341:20341 Tactics <> n var
R20345:20345 Tactics <> m var
R20330:20332 Coq.Init.Logic <> :type_scope:x_'='_x not
R20319:20325 Basics <> beq_nat def
R20329:20329 Tactics <> m var
R20327:20327 Tactics <> n var
R20333:20336 Basics <> true constr
prf 20520:20531 <> beq_nat_true
R20574:20576 Coq.Init.Logic <> :type_scope:x_'='_x not
R20573:20573 Tactics <> n var
R20577:20577 Tactics <> m var
R20562:20564 Coq.Init.Logic <> :type_scope:x_'='_x not
R20551:20557 Basics <> beq_nat def
R20561:20561 Tactics <> m var
R20559:20559 Tactics <> n var
R20565:20568 Basics <> true constr
R20744:20750 Tactics <> f_equal thm
R20744:20750 Tactics <> f_equal thm
prf 22382:22410 <> double_injective_take2_FAILED
R22460:22462 Coq.Init.Logic <> :type_scope:x_'='_x not
R22459:22459 Tactics <> n var
R22463:22463 Tactics <> m var
R22439:22441 Coq.Init.Logic <> :type_scope:x_'='_x not
R22431:22436 Induction <> double def
R22438:22438 Tactics <> n var
R22442:22447 Induction <> double def
R22449:22449 Tactics <> m var
R22743:22749 Tactics <> f_equal thm
R22743:22749 Tactics <> f_equal thm
prf 23685:23706 <> double_injective_take2
R23756:23758 Coq.Init.Logic <> :type_scope:x_'='_x not
R23755:23755 Tactics <> n var
R23759:23759 Tactics <> m var
R23735:23737 Coq.Init.Logic <> :type_scope:x_'='_x not
R23727:23732 Induction <> double def
R23734:23734 Tactics <> n var
R23738:23743 Induction <> double def
R23745:23745 Tactics <> m var
R24222:24228 Tactics <> f_equal thm
R24222:24228 Tactics <> f_equal thm
prf 26428:26438 <> beq_id_true
R26478:26480 Coq.Init.Logic <> :type_scope:x_'='_x not
R26477:26477 Tactics <> x var
R26481:26481 Tactics <> y var
R26466:26468 Coq.Init.Logic <> :type_scope:x_'='_x not
R26456:26461 Lists <> beq_id def
R26465:26465 Tactics <> y var
R26463:26463 Tactics <> x var
R26469:26472 Basics <> true constr
R26542:26544 Coq.Init.Logic <> :type_scope:x_'='_x not
R26542:26544 Coq.Init.Logic <> :type_scope:x_'='_x not
R26557:26568 Tactics <> beq_nat_true thm
R26557:26568 Tactics <> beq_nat_true thm
prf 26724:26737 <> nth_error_cons
R26764:26764 Tactics <> X var
R26787:26789 Coq.Init.Logic <> :type_scope:x_'='_x not
R26774:26782 Poly <> nth_error def
R26786:26786 Tactics <> n var
R26784:26784 Tactics <> l var
R26790:26798 Poly <> nth_error def
R26810:26810 Coq.Init.Datatypes <> S constr
R26812:26812 Tactics <> n var
R26802:26805 Poly <> ::x_'::'_x not
R26801:26801 Tactics <> x var
R26806:26806 Tactics <> l var
prf 26853:26872 <> nth_error_after_last
R26887:26889 Coq.Init.Datatypes <> nat ind
R26908:26911 Poly <> list ind
R26913:26913 Tactics <> X var
R26956:26958 Coq.Init.Logic <> :type_scope:x_'='_x not
R26943:26951 Poly <> nth_error def
R26955:26955 Tactics <> n var
R26953:26953 Tactics <> l var
R26959:26962 Poly <> None constr
R26930:26932 Coq.Init.Logic <> :type_scope:x_'='_x not
R26922:26927 Poly <> length def
R26929:26929 Tactics <> l var
R26933:26933 Tactics <> n var
R27094:27096 Coq.Init.Logic <> :type_scope:x_'='_x not
R27088:27091 Poly <> ::x_'::'_x not
R27101:27104 Poly <> ::x_'++'_x not
R27097:27097 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R27100:27100 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R27094:27096 Coq.Init.Logic <> :type_scope:x_'='_x not
R27088:27091 Poly <> ::x_'::'_x not
R27101:27104 Poly <> ::x_'++'_x not
R27097:27097 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R27100:27100 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R27168:27177 Poly <> app_length thm
R27168:27177 Poly <> app_length thm
def 27587:27592 <> square
R27600:27602 Basics <> :nat_scope:x_'*'_x not
R27599:27599 Tactics <> n var
R27603:27603 Tactics <> n var
prf 27674:27684 <> square_mult
R27714:27716 Coq.Init.Logic <> :type_scope:x_'='_x not
R27700:27705 Tactics <> square def
R27709:27711 Basics <> :nat_scope:x_'*'_x not
R27708:27708 Tactics <> n var
R27712:27712 Tactics <> m var
R27725:27727 Basics <> :nat_scope:x_'*'_x not
R27717:27722 Tactics <> square def
R27724:27724 Tactics <> n var
R27728:27733 Tactics <> square def
R27735:27735 Tactics <> m var
R28052:28057 Tactics <> square def
R28382:28391 Induction <> mult_assoc prfax
R28382:28391 Induction <> mult_assoc prfax
R28417:28419 Coq.Init.Logic <> :type_scope:x_'='_x not
R28413:28415 Basics <> :nat_scope:x_'*'_x not
R28409:28411 Basics <> :nat_scope:x_'*'_x not
R28425:28427 Basics <> :nat_scope:x_'*'_x not
R28421:28423 Basics <> :nat_scope:x_'*'_x not
R28417:28419 Coq.Init.Logic <> :type_scope:x_'='_x not
R28413:28415 Basics <> :nat_scope:x_'*'_x not
R28409:28411 Basics <> :nat_scope:x_'*'_x not
R28425:28427 Basics <> :nat_scope:x_'*'_x not
R28421:28423 Basics <> :nat_scope:x_'*'_x not
R28444:28452 Induction <> mult_comm prfax
R28444:28452 Induction <> mult_comm prfax
R28461:28470 Induction <> mult_assoc prfax
R28461:28470 Induction <> mult_assoc prfax
R28496:28505 Induction <> mult_assoc prfax
R28496:28505 Induction <> mult_assoc prfax
def 28893:28895 <> foo
R28901:28903 Coq.Init.Datatypes <> nat ind
prf 29116:29127 <> silly_fact_1
R29150:29152 Coq.Init.Logic <> :type_scope:x_'='_x not
R29146:29148 Basics <> :nat_scope:x_'+'_x not
R29141:29143 Tactics <> foo def
R29145:29145 Tactics <> m var
R29164:29166 Basics <> :nat_scope:x_'+'_x not
R29153:29155 Tactics <> foo def
R29159:29161 Basics <> :nat_scope:x_'+'_x not
R29158:29158 Tactics <> m var
def 29397:29399 <> bar
R29414:29414 Tactics <> x var
R29425:29425 Coq.Init.Datatypes <> O constr
R29436:29436 Coq.Init.Datatypes <> S constr
prf 29510:29528 <> silly_fact_2_FAILED
R29551:29553 Coq.Init.Logic <> :type_scope:x_'='_x not
R29547:29549 Basics <> :nat_scope:x_'+'_x not
R29542:29544 Tactics <> bar def
R29546:29546 Tactics <> m var
R29565:29567 Basics <> :nat_scope:x_'+'_x not
R29554:29556 Tactics <> bar def
R29560:29562 Basics <> :nat_scope:x_'+'_x not
R29559:29559 Tactics <> m var
prf 30556:30567 <> silly_fact_2
R30590:30592 Coq.Init.Logic <> :type_scope:x_'='_x not
R30586:30588 Basics <> :nat_scope:x_'+'_x not
R30581:30583 Tactics <> bar def
R30585:30585 Tactics <> m var
R30604:30606 Basics <> :nat_scope:x_'+'_x not
R30593:30595 Tactics <> bar def
R30599:30601 Basics <> :nat_scope:x_'+'_x not
R30598:30598 Tactics <> m var
prf 30954:30966 <> silly_fact_2'
R30989:30991 Coq.Init.Logic <> :type_scope:x_'='_x not
R30985:30987 Basics <> :nat_scope:x_'+'_x not
R30980:30982 Tactics <> bar def
R30984:30984 Tactics <> m var
R31003:31005 Basics <> :nat_scope:x_'+'_x not
R30992:30994 Tactics <> bar def
R30998:31000 Basics <> :nat_scope:x_'+'_x not
R30997:30997 Tactics <> m var
R31037:31039 Tactics <> bar def
def 31683:31690 <> sillyfun
R31697:31699 Coq.Init.Datatypes <> nat ind
R31704:31707 Basics <> bool ind
R31717:31723 Basics <> beq_nat def
R31725:31725 Tactics <> n var
R31750:31756 Basics <> beq_nat def
R31758:31758 Tactics <> n var
R31780:31784 Basics <> false constr
R31767:31771 Basics <> false constr
R31734:31738 Basics <> false constr
prf 31796:31809 <> sillyfun_false
R31825:31827 Coq.Init.Datatypes <> nat ind
R31843:31845 Coq.Init.Logic <> :type_scope:x_'='_x not
R31833:31840 Tactics <> sillyfun def
R31842:31842 Tactics <> n var
R31846:31850 Basics <> false constr
R31879:31886 Tactics <> sillyfun def
R31901:31907 Basics <> beq_nat def
R31901:31907 Basics <> beq_nat def
R32001:32007 Basics <> beq_nat def
R32001:32007 Basics <> beq_nat def
prf 32806:32818 <> combine_split
R32838:32841 Poly <> list ind
R32845:32847 Poly <> :type_scope:x_'*'_x not
R32844:32844 Tactics <> X var
R32848:32848 Tactics <> Y var
R32898:32900 Coq.Init.Logic <> :type_scope:x_'='_x not
R32885:32891 Poly <> combine def
R32896:32897 Tactics <> l2 var
R32893:32894 Tactics <> l1 var
R32901:32901 Tactics <> l var
R32868:32870 Coq.Init.Logic <> :type_scope:x_'='_x not
R32861:32865 Poly <> split def
R32867:32867 Tactics <> l var
R32871:32871 Poly <> ::'('_x_','_x_')' not
R32874:32875 Poly <> ::'('_x_','_x_')' not
R32878:32878 Poly <> ::'('_x_','_x_')' not
R32872:32873 Tactics <> l1 var
R32876:32877 Tactics <> l2 var
R32955:32959 Poly <> split def
R33089:33091 Coq.Init.Logic <> :type_scope:x_'='_x not
R33073:33073 Poly <> ::'('_x_','_x_')' not
R33080:33081 Poly <> ::'('_x_','_x_')' not
R33088:33088 Poly <> ::'('_x_','_x_')' not
R33074:33076 Poly <> fst def
R33082:33084 Poly <> snd def
R33089:33091 Coq.Init.Logic <> :type_scope:x_'='_x not
R33073:33073 Poly <> ::'('_x_','_x_')' not
R33080:33081 Poly <> ::'('_x_','_x_')' not
R33088:33088 Poly <> ::'('_x_','_x_')' not
R33074:33076 Poly <> fst def
R33082:33084 Poly <> snd def
R33360:33362 Coq.Init.Logic <> :type_scope:x_'='_x not
R33333:33339 Poly <> combine def
R33352:33355 Poly <> sndl def
R33342:33345 Poly <> fstl def
R33360:33362 Coq.Init.Logic <> :type_scope:x_'='_x not
R33333:33339 Poly <> combine def
R33352:33355 Poly <> sndl def
R33342:33345 Poly <> fstl def
def 33687:33695 <> sillyfun1
R33702:33704 Coq.Init.Datatypes <> nat ind
R33709:33712 Basics <> bool ind
R33722:33728 Basics <> beq_nat def
R33730:33730 Tactics <> n var
R33754:33760 Basics <> beq_nat def
R33762:33762 Tactics <> n var
R33783:33787 Basics <> false constr
R33771:33774 Basics <> true constr
R33739:33742 Basics <> true constr
prf 34046:34065 <> sillyfun1_odd_FAILED
R34081:34083 Coq.Init.Datatypes <> nat ind
R34125:34127 Coq.Init.Logic <> :type_scope:x_'='_x not
R34119:34122 Basics <> oddb def
R34124:34124 Tactics <> n var
R34128:34131 Basics <> true constr
R34103:34105 Coq.Init.Logic <> :type_scope:x_'='_x not
R34092:34100 Tactics <> sillyfun1 def
R34102:34102 Tactics <> n var
R34106:34109 Basics <> true constr
R34163:34171 Tactics <> sillyfun1 def
R34192:34198 Basics <> beq_nat def
R34192:34198 Basics <> beq_nat def
prf 35048:35060 <> sillyfun1_odd
R35076:35078 Coq.Init.Datatypes <> nat ind
R35120:35122 Coq.Init.Logic <> :type_scope:x_'='_x not
R35114:35117 Basics <> oddb def
R35119:35119 Tactics <> n var
R35123:35126 Basics <> true constr
R35098:35100 Coq.Init.Logic <> :type_scope:x_'='_x not
R35087:35095 Tactics <> sillyfun1 def
R35097:35097 Tactics <> n var
R35101:35104 Basics <> true constr
R35158:35166 Tactics <> sillyfun1 def
R35187:35193 Basics <> beq_nat def
R35187:35193 Basics <> beq_nat def
R35442:35453 Tactics <> beq_nat_true thm
R35442:35453 Tactics <> beq_nat_true thm
R35740:35746 Basics <> beq_nat def
R35740:35746 Basics <> beq_nat def
R35806:35817 Tactics <> beq_nat_true thm
R35806:35817 Tactics <> beq_nat_true thm
prf 35981:36002 <> bool_fn_applied_thrice
R36028:36031 Basics <> bool ind
R36020:36023 Basics <> bool ind
R36039:36042 Basics <> bool ind
R36059:36061 Coq.Init.Logic <> :type_scope:x_'='_x not
R36048:36048 Tactics <> f var
R36051:36051 Tactics <> f var
R36054:36054 Tactics <> f var
R36056:36056 Tactics <> b var
R36062:36062 Tactics <> f var
R36064:36064 Tactics <> b var
R36120:36123 Basics <> true constr
R36120:36123 Basics <> true constr
R36215:36219 Basics <> false constr
R36215:36219 Basics <> false constr
R36293:36297 Basics <> false constr
R36293:36297 Basics <> false constr
R36338:36341 Basics <> true constr
R36338:36341 Basics <> true constr
prf 38705:38715 <> beq_nat_sym
R38733:38735 Coq.Init.Datatypes <> nat ind
R38752:38754 Coq.Init.Logic <> :type_scope:x_'='_x not
R38741:38747 Basics <> beq_nat def
R38751:38751 Tactics <> m var
R38749:38749 Tactics <> n var
R38755:38761 Basics <> beq_nat def
R38765:38765 Tactics <> n var
R38763:38763 Tactics <> m var
R38795:38801 Basics <> beq_nat def
R38795:38801 Basics <> beq_nat def
R38835:38846 Tactics <> beq_nat_true thm
R38835:38846 Tactics <> beq_nat_true thm
R38882:38893 Induction <> beq_nat_refl prfax
R38882:38893 Induction <> beq_nat_refl prfax
R39002:39013 Induction <> beq_nat_refl prfax
R39002:39013 Induction <> beq_nat_refl prfax
prf 39510:39522 <> beq_nat_trans
R39601:39603 Coq.Init.Logic <> :type_scope:x_'='_x not
R39590:39596 Basics <> beq_nat def
R39600:39600 Tactics <> p var
R39598:39598 Tactics <> n var
R39604:39607 Basics <> true constr
R39577:39579 Coq.Init.Logic <> :type_scope:x_'='_x not
R39566:39572 Basics <> beq_nat def
R39576:39576 Tactics <> p var
R39574:39574 Tactics <> m var
R39580:39583 Basics <> true constr
R39553:39555 Coq.Init.Logic <> :type_scope:x_'='_x not
R39542:39548 Basics <> beq_nat def
R39552:39552 Tactics <> m var
R39550:39550 Tactics <> n var
R39556:39559 Basics <> true constr
R39658:39660 Coq.Init.Logic <> :type_scope:x_'='_x not
R39658:39660 Coq.Init.Logic <> :type_scope:x_'='_x not
R39673:39684 Tactics <> beq_nat_true thm
R39673:39684 Tactics <> beq_nat_true thm
R39720:39722 Coq.Init.Logic <> :type_scope:x_'='_x not
R39720:39722 Coq.Init.Logic <> :type_scope:x_'='_x not
R39735:39746 Tactics <> beq_nat_true thm
R39735:39746 Tactics <> beq_nat_true thm
R39782:39784 Coq.Init.Logic <> :type_scope:x_'='_x not
R39782:39784 Coq.Init.Logic <> :type_scope:x_'='_x not
R39797:39804 Tactics <> trans_eq thm
R39797:39804 Tactics <> trans_eq thm
R39850:39861 Induction <> beq_nat_refl prfax
R39850:39861 Induction <> beq_nat_refl prfax
def 40581:40603 <> split_combine_statement
R40729:40732 Poly <> list ind
R40736:40738 Poly <> :type_scope:x_'*'_x not
R40735:40735 Tactics <> X var
R40739:40739 Tactics <> Y var
R40749:40752 Poly <> list ind
R40754:40754 Tactics <> X var
R40763:40766 Poly <> list ind
R40768:40768 Tactics <> Y var
R40831:40833 Coq.Init.Logic <> :type_scope:x_'='_x not
R40824:40828 Poly <> split def
R40830:40830 Tactics <> l var
R40834:40834 Poly <> ::'('_x_','_x_')' not
R40837:40838 Poly <> ::'('_x_','_x_')' not
R40841:40841 Poly <> ::'('_x_','_x_')' not
R40835:40836 Tactics <> l1 var
R40839:40840 Tactics <> l2 var
R40814:40816 Coq.Init.Logic <> :type_scope:x_'='_x not
R40801:40807 Poly <> combine def
R40812:40813 Tactics <> l2 var
R40809:40810 Tactics <> l1 var
R40817:40817 Tactics <> l var
R40783:40785 Coq.Init.Logic <> :type_scope:x_'='_x not
R40774:40779 Poly <> length def
R40781:40782 Tactics <> l1 var
R40786:40791 Poly <> length def
R40793:40794 Tactics <> l2 var
prf 40853:40865 <> split_combine
R40869:40891 Tactics <> split_combine_statement def
R40910:40932 Tactics <> split_combine_statement def
R41045:41051 Poly <> combine def
R41327:41329 Coq.Init.Logic <> :type_scope:x_'='_x not
R41319:41323 Poly <> split def
R41330:41330 Poly <> ::'('_x_','_x_')' not
R41334:41336 Poly <> ::'('_x_','_x_')' not
R41340:41340 Poly <> ::'('_x_','_x_')' not
R41327:41329 Coq.Init.Logic <> :type_scope:x_'='_x not
R41319:41323 Poly <> split def
R41330:41330 Poly <> ::'('_x_','_x_')' not
R41334:41336 Poly <> ::'('_x_','_x_')' not
R41340:41340 Poly <> ::'('_x_','_x_')' not
R41395:41399 Poly <> split def
R41416:41420 Poly <> split def
prf 41635:41649 <> filter_exercise
R41684:41687 Basics <> bool ind
R41679:41679 Tactics <> X var
R41724:41724 Tactics <> X var
R41735:41738 Poly <> list ind
R41740:41740 Tactics <> X var
R41787:41789 Coq.Init.Logic <> :type_scope:x_'='_x not
R41781:41784 Tactics <> test var
R41786:41786 Tactics <> x var
R41790:41793 Basics <> true constr
R41762:41764 Coq.Init.Logic <> :type_scope:x_'='_x not
R41749:41754 Poly <> filter def
R41761:41761 Tactics <> l var
R41756:41759 Tactics <> test var
R41766:41769 Poly <> ::x_'::'_x not
R41765:41765 Tactics <> x var
R41770:41771 Tactics <> lf var
def 42989:42995 <> forallb
R43023:43026 Basics <> bool ind
R43018:43018 Tactics <> X var
R43034:43037 Poly <> list ind
R43039:43039 Tactics <> X var
R43051:43051 Tactics <> l var
R43062:43064 Poly <> nil constr
R43069:43072 Basics <> true constr
R43080:43083 Poly <> ::x_'::'_x not
R43091:43094 Basics <> andb def
R43107:43113 Tactics <> forallb def
R43115:43118 Tactics <> test var
R43097:43100 Tactics <> test var
def 43139:43152 <> test_forallb_1
R43180:43182 Coq.Init.Logic <> :type_scope:x_'='_x not
R43156:43162 Tactics <> forallb def
R43169:43169 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43171:43171 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43173:43173 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43175:43175 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43177:43177 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43179:43179 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43164:43167 Basics <> oddb def
R43183:43186 Basics <> true constr
def 43215:43228 <> test_forallb_2
R43258:43260 Coq.Init.Logic <> :type_scope:x_'='_x not
R43232:43238 Tactics <> forallb def
R43245:43245 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43251:43251 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43257:43257 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43252:43256 Basics <> false constr
R43246:43250 Basics <> false constr
R43240:43243 Basics <> negb def
R43261:43264 Basics <> true constr
def 43293:43306 <> test_forallb_3
R43333:43335 Coq.Init.Logic <> :type_scope:x_'='_x not
R43310:43316 Tactics <> forallb def
R43324:43324 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43326:43326 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43328:43328 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43330:43330 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43332:43332 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43318:43322 Basics <> evenb def
R43336:43340 Basics <> false constr
def 43369:43382 <> test_forallb_4
R43408:43410 Coq.Init.Logic <> :type_scope:x_'='_x not
R43386:43392 Tactics <> forallb def
R43406:43407 Poly <> ::'['_']' not
R43395:43401 Basics <> beq_nat def
R43411:43414 Basics <> true constr
def 43445:43451 <> existsb
R43479:43482 Basics <> bool ind
R43474:43474 Tactics <> X var
R43490:43493 Poly <> list ind
R43495:43495 Tactics <> X var
R43507:43507 Tactics <> l var
R43518:43520 Poly <> nil constr
R43525:43529 Basics <> false constr
R43537:43540 Poly <> ::x_'::'_x not
R43551:43554 Tactics <> test var
R43575:43581 Tactics <> existsb def
R43583:43586 Tactics <> test var
R43565:43568 Basics <> true constr
def 43605:43617 <> test_existb_1
R43650:43652 Coq.Init.Logic <> :type_scope:x_'='_x not
R43621:43627 Tactics <> existsb def
R43641:43641 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43643:43643 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43645:43645 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43647:43647 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43649:43649 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43630:43636 Basics <> beq_nat def
R43653:43657 Basics <> false constr
def 43686:43698 <> test_existb_2
R43739:43741 Coq.Init.Logic <> :type_scope:x_'='_x not
R43702:43708 Tactics <> existsb def
R43722:43722 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43727:43727 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43732:43732 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43738:43738 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43733:43737 Basics <> false constr
R43728:43731 Basics <> true constr
R43723:43726 Basics <> true constr
R43711:43714 Basics <> andb def
R43716:43719 Basics <> true constr
R43742:43745 Basics <> true constr
def 43774:43786 <> test_existb_3
R43816:43818 Coq.Init.Logic <> :type_scope:x_'='_x not
R43790:43796 Tactics <> existsb def
R43803:43803 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43805:43805 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43807:43807 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43809:43809 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43811:43811 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43813:43813 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43815:43815 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R43798:43801 Basics <> oddb def
R43819:43822 Basics <> true constr
def 43851:43863 <> test_existb_4
R43883:43885 Coq.Init.Logic <> :type_scope:x_'='_x not
R43867:43873 Tactics <> existsb def
R43881:43882 Poly <> ::'['_']' not
R43875:43879 Basics <> evenb def
R43886:43890 Basics <> false constr
def 43923:43930 <> existsb'
R43958:43961 Basics <> bool ind
R43953:43953 Tactics <> X var
R43969:43972 Poly <> list ind
R43974:43974 Tactics <> X var
R43982:43985 Basics <> negb def
R43988:43994 Tactics <> forallb def
R44013:44013 Tactics <> l var
R43997:44005 Poly <> anti_func def
R44007:44010 Tactics <> test var
def 44026:44039 <> test_existb'_1
R44073:44075 Coq.Init.Logic <> :type_scope:x_'='_x not
R44043:44050 Tactics <> existsb' def
R44064:44064 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44066:44066 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44068:44068 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44070:44070 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44072:44072 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44053:44059 Basics <> beq_nat def
R44076:44080 Basics <> false constr
def 44109:44122 <> test_existb'_2
R44164:44166 Coq.Init.Logic <> :type_scope:x_'='_x not
R44126:44133 Tactics <> existsb' def
R44147:44147 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44152:44152 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44157:44157 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44163:44163 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44158:44162 Basics <> false constr
R44153:44156 Basics <> true constr
R44148:44151 Basics <> true constr
R44136:44139 Basics <> andb def
R44141:44144 Basics <> true constr
R44167:44170 Basics <> true constr
def 44199:44212 <> test_existb'_3
R44243:44245 Coq.Init.Logic <> :type_scope:x_'='_x not
R44216:44223 Tactics <> existsb' def
R44230:44230 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44232:44232 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44234:44234 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44236:44236 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44238:44238 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44240:44240 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44242:44242 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R44225:44228 Basics <> oddb def
R44246:44249 Basics <> true constr
def 44278:44291 <> test_existb'_4
R44312:44314 Coq.Init.Logic <> :type_scope:x_'='_x not
R44295:44302 Tactics <> existsb' def
R44310:44311 Poly <> ::'['_']' not
R44304:44308 Basics <> evenb def
R44315:44319 Basics <> false constr
prf 44349:44364 <> existsb_existsb'
R44399:44402 Basics <> bool ind
R44394:44394 Tactics <> X var
R44410:44413 Poly <> list ind
R44415:44415 Tactics <> X var
R44435:44437 Coq.Init.Logic <> :type_scope:x_'='_x not
R44421:44427 Tactics <> existsb def
R44434:44434 Tactics <> l var
R44429:44432 Tactics <> test var
R44438:44445 Tactics <> existsb' def
R44452:44452 Tactics <> l var
R44447:44450 Tactics <> test var
R44547:44554 Tactics <> existsb' def
R44571:44579 Poly <> anti_func def
R44611:44618 Tactics <> existsb' def
R44636:44644 Poly <> anti_func def
